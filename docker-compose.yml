version: '3.8'

services:
  # Main EquiML application
  equiml:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: equiml-core
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
      - EQUIML_ENV=docker
    networks:
      - equiml-network
    restart: unless-stopped

  # Development environment with Jupyter
  equiml-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: equiml-development
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8501:8501"  # Streamlit
      - "6006:6006"  # TensorBoard
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
      - ./experiments:/app/experiments
      - ./data:/app/data
      - ./outputs:/app/outputs
    environment:
      - PYTHONPATH=/app
      - JUPYTER_ENABLE_LAB=yes
      - DEVELOPMENT=1
    networks:
      - equiml-network
    restart: unless-stopped

  # Jupyter notebook server
  equiml-jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: equiml-jupyter
    ports:
      - "8889:8888"
    volumes:
      - ./examples/notebooks:/home/jovyan/work/notebooks
      - ./data:/home/jovyan/work/data
      - ./outputs:/home/jovyan/work/outputs
    environment:
      - JUPYTER_TOKEN=
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - equiml-network
    restart: unless-stopped

  # Web demo application
  equiml-demo:
    build:
      context: examples/web_demo
      dockerfile: Dockerfile
    container_name: equiml-web-demo
    ports:
      - "8502:8501"
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
    environment:
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
    networks:
      - equiml-network
    restart: unless-stopped
    depends_on:
      - equiml

  # Database for storing results (optional)
  postgres:
    image: postgres:15-alpine
    container_name: equiml-database
    environment:
      - POSTGRES_DB=equiml
      - POSTGRES_USER=equiml
      - POSTGRES_PASSWORD=equiml_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - equiml-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: equiml-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - equiml-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: equiml-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - equiml-demo
      - equiml-dev
    networks:
      - equiml-network
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: equiml-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - equiml-network
    restart: unless-stopped

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: equiml-dashboards
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=equiml_admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - equiml-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  equiml-network:
    driver: bridge